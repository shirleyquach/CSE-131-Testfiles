typedef int INTEGER;
typedef int MONTH;

INTEGER i;
MONTH m;
float r;

structdef REC1 { float a; };
structdef REC2 { float a; };
typedef REC1 REC3;

REC1 r1;
REC2 r2;
REC3 r3;

function : int f(REC1 &a) { /* stuff */ }

float[5] a1;
int[5] a2;

function : int g(float[5] &a) { /* stuff */ }

int* p1;
INTEGER* p2;
REC1* p3;
REC2* p4;

function : int main() {

    i = m;   // okay,  assignable - loose name equivalent
    i = r;   // error, not assignable - float cannot be assigned to int
    r = i;   // okay,  assignable - int can be assigned to float (coercion)

    f(r1);   // okay,  same type/equivalent
    f(r2);   // error, not strict name equivalent

    g(a1);   // okay,  structurally equivalent
    g(a2);   // error, not assignable - not structurally equivalent

    a1 = a1; // error, ARRAYs are not modifiable L-vals

    r1 = r1; // okay, strict name equivalent and RECORDs are mod L-vals
    r3 = r1; // okay, strict name equivalent and RECORDs are mod L-vals

    p1 = p2; // okay, loose name equivalent
    p3 = p4; // error, not strict name equivalent

    return 0;
}

