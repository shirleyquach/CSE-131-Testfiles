function : void projSpecExample() {
    const int cc = 1;
    typedef float[10] ARR;
    float[10] a;
    ARR b;
    int[10] e;

    ARR[2] c; // This results in an array with 2 rows, 10 cols
    float * d;
    c[1][9] = a[2];
    b[b[b[b[2] - cc] + cc] - 1] = c[1][9]; // error because floats are being used as indices
    e[e[e[e[2] - cc] + cc] - 1] = e[1];
    a[2] = d[0]; // not an error because the pointer is dereferenced to a float

    d[1000] = 5; // not an error because d is a pointer, so no bounds checking is necessary

    b[b[b[b[10]]]]; // error because 10 is outside of legal range of b (size 10)
    a[2] = a[10]; // error because 10 is outside of legal range of a (size 10)
}

function : int testArrayRe(int[5] & array)
{
    return 0;
}

function : int testArrayPt(int* param)
{
    return 0;
}

function : int main() {
    typedef int[100] ARR;
    int[10] a;
    ARR[10] b;
    float[10] d;
    b[0][9] = 1;
    
    int x = 5;
    float f = 10;
    a[1.3]; // error because floats cannot be used as indices
    a[-1.3]; // error because <strong>floats</strong> cannot be used as indices (float before checking negative bounds)
    x[5]; // error because x is an int and not an array 
    f[1]; // error because f is a float and not an array

    int[10] myList;
    ARR[100] hundredByHun;

    // Following test cases are taken from the project spec
    myList[0] = 1;
    const int c = 4;
    int y = myList[100]; // error because 100 is out of bounds
    myList[55]; //error
    myList[0-99]; //error because -99 is out of bounds
    myList[y+10]; 
    myList[c];
    myList[c+7]; // error because c+7 = 11 and 11 is out of bounds
    myList[-9]; // error because -9 is out of bounds
    hundredByHun[5][7];
    hundredByHun[-9][0]; // error because -9 is out of bounds
    b[0][99];
    b[0][100]; // error because 100 is out of bounds of b's second dimension
    b[100][0]; // error because 100 is out of bounds of b's first dimension
    b[100][100]; // error because 100 is out of bounds of b's first dimension
    b[c+10][c-10]; // error 4 + 10 = 14 and 14 is outside of b's first dimension

    typedef float[100] FLO;
    FLO[10] what;

    what[9];
    what[100][10]; // error because what's first dimension is of size 10

    ARR*[11] ptR;

    ptR[0][1000]; // not an error because bounds checking is unnecessary for pointers
    ptR[0];

    // extend previous checks

    a[5]++;
    a[4] = a[5] + a[6];
    d[5] = a[5] + d[8];
    a[5] = a[5] + d[8]; // error because float cannot be assigned to int
    a[10]++; // error because 10 is outside of a's legal bounds
    a[9] = a[8] + a[10]; // error because 10 is outside of a's legal bounds (so result cannot be computed)
    a[10] = a[8] + a[9]; // error because 10 is out of a's legal bounds (so result cannot be computed)

    projSpecExample();
    int[5] tmpArray;
    // Examples taken from discussion slides
    int nothing = testArrayRe(tmpArray);

    int sum = testArrayPt(tmpArray);
    int* ptrToInt;
    int justInt;
    testArrayPt(ptrToInt);
    testArrayPt(justInt); // error because the parameter justInt (type int) is not assignable to testArrayPt's argument of type int*

    float[2] fltArray;
    testArrayRe(fltArray); // error because float[] is not equivalent to testArrayRe's argument of type int[]

    float[5] tmpFloatArr;

    return 0;
}